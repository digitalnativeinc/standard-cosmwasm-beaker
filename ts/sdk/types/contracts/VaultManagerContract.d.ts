/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export interface Config {
    admin: string;
    count: number;
    factory: string;
    initialized: boolean;
    stablecoin: string;
    v1: string;
    vault_code_id: number;
    [k: string]: unknown;
}
export declare type ExecuteMsg = {
    initialize: {
        admin_: string;
        factory_: string;
        stablecoin_: string;
        v1_: string;
        vault_code_id_: number;
        [k: string]: unknown;
    };
} | {
    create_vault: {
        d_amount: Uint128;
        [k: string]: unknown;
    };
} | {
    set_vault_config: {
        c_decimal_: number;
        clt: string;
        lfr_: number;
        mcr_: number;
        pool_id_: number;
        sfr_: number;
        [k: string]: unknown;
    };
};
export declare type Uint128 = string;
export interface GetConfigResponse {
    admin: string;
    stablecoin: string;
    v1: string;
    vault_code_id: number;
    [k: string]: unknown;
}
export interface GetVaultConfigResponse {
    c_decimal: number;
    lfr: number;
    mcr: number;
    pool_id: number;
    sfr: number;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    [k: string]: unknown;
}
export declare type QueryMsg = {
    get_vault_config: {
        clt: string;
        [k: string]: unknown;
    };
} | {
    get_config: {
        [k: string]: unknown;
    };
};
export interface Reserve {
    amount: Uint128;
    to: string;
    vault_id: number;
    [k: string]: unknown;
}
export interface VaultConfig {
    c_decimal: number;
    lfr: number;
    mcr: number;
    pool_id: number;
    sfr: number;
    [k: string]: unknown;
}
export interface VaultManagerReadOnlyInterface {
    contractAddress: string;
    getVaultConfig: ({ clt }: {
        clt: string;
    }) => Promise<GetVaultConfigResponse>;
    getConfig: () => Promise<GetConfigResponse>;
}
export declare class VaultManagerQueryClient implements VaultManagerReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getVaultConfig: ({ clt }: {
        clt: string;
    }) => Promise<GetVaultConfigResponse>;
    getConfig: () => Promise<GetConfigResponse>;
}
export interface VaultManagerInterface extends VaultManagerReadOnlyInterface {
    contractAddress: string;
    sender: string;
    initialize: ({ admin, factory, stablecoin, v1, vaultCodeId }: {
        admin: string;
        factory: string;
        stablecoin: string;
        v1: string;
        vaultCodeId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    createVault: ({ dAmount }: {
        dAmount: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    setVaultConfig: ({ cDecimal, clt, lfr, mcr, poolId, sfr }: {
        cDecimal: number;
        clt: string;
        lfr: number;
        mcr: number;
        poolId: number;
        sfr: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class VaultManagerClient extends VaultManagerQueryClient implements VaultManagerInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    initialize: ({ admin, factory, stablecoin, v1, vaultCodeId }: {
        admin: string;
        factory: string;
        stablecoin: string;
        v1: string;
        vaultCodeId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    createVault: ({ dAmount }: {
        dAmount: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    setVaultConfig: ({ cDecimal, clt, lfr, mcr, poolId, sfr }: {
        cDecimal: number;
        clt: string;
        lfr: number;
        mcr: number;
        poolId: number;
        sfr: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=VaultManagerContract.d.ts.map